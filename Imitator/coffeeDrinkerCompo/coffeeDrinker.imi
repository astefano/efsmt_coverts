
Skip to content
Personal
Open source
Business
Explore
Pricing
Blog
Support
This repository

6
6

    8

etienneandre/imitator
Code
Issues 6
Pull requests 0
Pulse
Graphs
imitator/benchmarks/Coffee/coffeeDrinker.imi
3c986b2 on 30 Sep 2015
@etienneandre etienneandre Rename 'examples' dir into 'benchmarks'
144 lines (112 sloc) 4.38 KB
(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Coffee vending machine with drinker
 *
 * Description     : Coffee vending machine; a single button is used to wake the machine up, and to add sugar. Then a cup, and coffee are delivered after a (parametric) time.
	Drinker: [ongoing work]
 * Correctness     : Many possibilities (e.g., "it is possible to get a coffee")
 * Source          : Own work
 * Author          : Etienne Andre
 * Input by        : Etienne Andre
 *
 * Created         : 2011/01/21
 * Last modified   : 2015/07/08
 *
 * IMITATOR version: 2.7-beta3
 ************************************************************)

var

(* Clocks *)
 	x1, x2, y1, y2
		: clock;

(* Parameters *)
	(* time during which the button cannot be pressed after a pressure *)
(* 	p_block_button, *)
	(* time during which one can add sugar *)
	p_add_sugar,
	(* time needed to prepare the coffee from the first button pressure *)
	p_coffee,

	(* interval of work without need for coffee *)
	p_work_min, p_work_max,
	(* interval of time between 2 consecutive pressures by the user *)
	p_press,
	(* time after which the drinker gets mad *)
	p_patience_max
		: parameter;

(* Discrete variables *)
	nb_sugar
		: discrete;

(* Constants *)
	MAX_SUGAR = 2
		: parameter;


(************************************************************)
  automaton machine
(************************************************************)
synclabs: press, cup, coffee, sleep;

loc idle: while True wait {}
	when True sync press do {x1' = 0, x2' = 0} goto add_sugar;

loc add_sugar: while x2 <= p_add_sugar & x2 <= p_coffee wait {}
	when (*x1 >= p_block_button*)True sync press do {x1' = 0} goto add_sugar;
	when x2 = p_add_sugar sync cup do {} goto preparing_coffee;

loc preparing_coffee: while x2 <= p_coffee wait {}
(* 	when x2 = p_coffee sync coffee goto idle; *)
	when True sync press goto preparing_coffee;
	when x2 = p_coffee sync coffee do {x1' = 0} goto cdone;

loc cdone: while x1 <= 10 wait {}
	when True sync press do {x1' = 0, x2' = 0} goto add_sugar;
	when x1 = 10 sync sleep goto idle;

end (* machine *)


(************************************************************)
  automaton researcher
(************************************************************)
synclabs: press, coffee;

loc researching: while y1 <= p_work_max wait {}
	when y1 >= p_work_min sync press do {y1' = 0, y2' = 0, nb_sugar' = 0} goto add_sugar;

loc add_sugar: while y1 <= p_press & y2 <= p_patience_max & nb_sugar <= MAX_SUGAR wait {}
	when y1 = p_press & nb_sugar < MAX_SUGAR - 1 sync press do {y1' = 0, nb_sugar' = nb_sugar + 1} goto add_sugar;
	when y1 = p_press & nb_sugar = MAX_SUGAR - 1 sync press do {y1' = 0, nb_sugar' = nb_sugar + 1} goto wait_coffee;
	when y2 = p_patience_max goto mad;

loc wait_coffee: while y2 <= p_patience_max wait {}
	when y2 < p_patience_max sync coffee do {y1' = 0} goto researching;
	when y2 = p_patience_max goto mad;

loc mad: while True wait {}

end (* researcher *)


(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------
	   INITIAL LOCATION
	  ------------------------------------------------------------*)
	& loc[machine]		= idle
	& loc[researcher]	= researching

	(*------------------------------------------------------------
	   INITIAL CLOCKS
	  ------------------------------------------------------------*)
	& x1 = 0
	& x2 = 0
	& y1 >= 0 & y1 <= p_work_max

	(*------------------------------------------------------------
	   INITIAL DISCRETE
	  ------------------------------------------------------------*)
	& nb_sugar = 0
	
	(*------------------------------------------------------------
	   PARAMETER CONSTRAINTS
	  ------------------------------------------------------------*)
(* 	& p_block_button >= 0 *)
	& p_add_sugar >= 0
	& p_coffee >= 0
	& p_press >= 0
	& p_work_min >= 0
	& p_work_min <= p_work_max
	& p_patience_max >= 0
;


(************************************************************)
(* Property specification *)
(************************************************************)

property := unreachable loc[researcher] = mad;
projectresult(p_patience_max, p_press, p_coffee);


(************************************************************)
(* The end *)
(************************************************************)
end

    Status API Training Shop Blog About 

    Â© 2016 GitHub, Inc. Terms Privacy Security Contact Help 


